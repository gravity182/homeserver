{{- $service := .Values.services.meilisearch }}
{{- if $service.enabled }}
{{- $upgrade := default dict $service.upgrade -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
  namespace: {{ include "homeserver.common.names.namespace" $ | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
  annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "homeserver.common.labels.matchLabels" ( dict "service" $service "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
      annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
    spec:
      automountServiceAccountToken: {{ include "homeserver.common.pod.automountServiceAccountToken" (dict "service" $service "context" $) }}
      enableServiceLinks: {{ include "homeserver.common.pod.enableServiceLinks" (dict "service" $service "context" $) }}
      priorityClassName: {{ include "homeserver.common.pod.priorityClass" (dict "service" $service "context" $) | quote }}
      affinity: {{- include "homeserver.common.pod.affinity" (dict "service" $service "context" $) | nindent 8 }}
      tolerations: {{- include "homeserver.common.pod.tolerations" (dict "service" $service "context" $) | nindent 8 }}
      securityContext: {{- include "homeserver.common.pod.securityContext" (dict "service" $service "context" $) | nindent 8 }}
      initContainers: {{- include "homeserver.common.pod.initContainers" (dict "service" $service "context" $) | nindent 8 }}
        {{- if and $upgrade.enabled (eq $upgrade.action "import") }}
        - name: backup-old-database
          image: docker.io/busybox:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ required "A valid UID required!" .Values.host.uid }}
            runAsGroup: {{ required "A valid GID required!" .Values.host.gid }}
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command:
            - /bin/sh
            - -c
            - |
              set -eux
              echo "Backing up old MeiliSearch database..."

              if [ -d "/meili_data/data.ms" ]; then
                rm -rf /meili_data/data.ms.old || true
                mv /meili_data/data.ms /meili_data/data.ms.old
                echo "Old database backed up to data.ms.old"
              else
                echo "Nothing to backup"
              fi

              echo "Database backup completed"
          volumeMounts:
            - name: data
              mountPath: /meili_data
        {{- end }}
      containers:
        - name: meilisearch
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "homeserver.common.container.securityContext" (dict "service" $service "context" $) | nindent 12 }}
          envFrom: {{- include "homeserver.common.container.envFrom" (dict "service" $service "context" $) | nindent 12 }}
          env: {{- include "homeserver.common.container.env" (dict "service" $service "context" $) | nindent 12 }}
            - name: MEILI_ENV
              value: production
            - name: MEILI_LOG_LEVEL
              value: INFO
            - name: MEILI_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $service.masterKey.secretName | quote }}
                  key: {{ $service.masterKey.secretKey | quote }}
                  optional: false
            - name: MEILI_NO_ANALYTICS
              value: "true"
            {{- if and $upgrade.enabled (eq $upgrade.action "export") }}
            - name: MEILI_DUMP_DIR
              value: "/upgrade-dump"
            {{- end }}
            {{- if and $upgrade.enabled (eq $upgrade.action "import") }}
            - name: MEILI_IMPORT_DUMP
              value: "/upgrade-dump/upgrade.dump"
            {{- end }}
          ports:
            - name: http
              containerPort: 7700
              protocol: TCP
          resources: {{- include "homeserver.common.container.resources" (dict "service" $service "context" $) | nindent 12 }}
          livenessProbe: {{- include "homeserver.common.container.livenessProbe.httpGet" (dict "service" $service "path" "/health" "context" $) | nindent 12 }}
          readinessProbe: {{- include "homeserver.common.container.readinessProbe.httpGet" (dict "service" $service "path" "/health" "context" $) | nindent 12 }}
          startupProbe: {{- include "homeserver.common.container.startupProbe.httpGet" (dict "service" $service "path" "/health" "context" $) | nindent 12 }}
          volumeMounts: {{- include "homeserver.common.container.volumeMounts" (dict "service" $service "context" $) | nindent 12 }}
            - name: data
              mountPath: /meili_data
            {{- if and $upgrade.enabled }}
            - name: upgrade-dump
              mountPath: /upgrade-dump
              {{- if eq $upgrade.action "import" }}
              readOnly: true
              {{- else }}
              readOnly: false
              {{- end }}
            {{- end }}
      volumes: {{- include "homeserver.common.pod.volumes" (dict "service" $service "context" $) | nindent 8 }}
        - name: data
          hostPath:
            path: {{ $service.persistence.data | quote }}
            type: Directory
        {{- if and $upgrade.enabled }}
        - name: upgrade-dump
          persistentVolumeClaim:
            claimName: meilisearch-upgrade-dump
        {{- end }}
{{- end }}
