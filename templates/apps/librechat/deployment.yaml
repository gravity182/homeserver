{{- $service := .Values.services.librechat }}
{{- if $service.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "homeserver.common.names.name" ( dict "service" $service ) | quote }}
  namespace: {{ include "homeserver.common.names.namespace" $ | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
  annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "homeserver.common.labels.matchLabels" ( dict "service" $service "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
      annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
        checksum/config: {{ include "homeserver.common.utils.checksumTemplate" ( dict "path" "/apps/librechat/configmap.yaml" "context" $ ) }}
    spec:
      automountServiceAccountToken: {{ include "homeserver.common.pod.automountServiceAccountToken" (dict "service" $service "context" $) }}
      enableServiceLinks: {{ include "homeserver.common.pod.enableServiceLinks" (dict "service" $service "context" $) }}
      priorityClassName: {{ include "homeserver.common.pod.priorityClass" (dict "service" $service "context" $) | quote }}
      affinity: {{- include "homeserver.common.pod.affinity" (dict "service" $service "context" $) | nindent 8 }}
      tolerations: {{- include "homeserver.common.pod.tolerations" (dict "service" $service "context" $) | nindent 8 }}
      securityContext: {{- include "homeserver.common.pod.securityContext" (dict "service" $service "context" $) | nindent 8 }}
      initContainers: {{- include "homeserver.common.pod.initContainers" (dict "service" $service "context" $) | nindent 8 }}
      containers:
        - name: librechat
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "homeserver.common.container.securityContext" (dict "service" $service "context" $) | nindent 12 }}
          envFrom: {{- include "homeserver.common.container.envFrom" (dict "service" $service "context" $) | nindent 12 }}
          env: {{- include "homeserver.common.container.env" (dict "service" $service "context" $) | nindent 12 }}
            - name: CONFIG_PATH
              value: /config/librechat.yaml
            - name: DOMAIN_SERVER
              value: {{ include "homeserver.common.utils.ingressUrl" ( dict "service" $service "context" $ ) | quote }}
            - name: DOMAIN_CLIENT
              value: {{ include "homeserver.common.utils.ingressUrl" ( dict "service" $service "context" $ ) | quote }}
            - name: ALLOW_EMAIL_LOGIN
              value: {{ $service.allowEmailLogin | quote }}
            - name: ALLOW_SOCIAL_LOGIN
              value: {{ $service.allowSocialLogin | quote }}
            - name: CUSTOM_FOOTER
              value: {{ $service.customFooter | quote }}
            - name: ENDPOINTS
              value: {{ $service.endpoints | quote }}
            {{- if $service.search }}
            {{- $meilisearch := .Values.services.meilisearch }}
            {{- if not $meilisearch.enabled }}
            {{- fail "Meilisearch is required for Librechat's search, but it is not enabled" }}
            {{- end }}
            - name: SEARCH
              value: "true"
            - name: MEILI_NO_ANALYTICS
              value: "true"
            - name: MEILI_HOST
              value: {{ include "homeserver.common.utils.serviceUrl" ( dict "service" $meilisearch "context" $ ) | quote }}
            - name: MEILI_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $meilisearch.masterKey.secretName | quote }}
                  key: {{ $meilisearch.masterKey.secretKey | quote }}
                  optional: false
            {{- else }}
            - name: SEARCH
              value: "false"
            {{- end }}
            - name: REFRESH_TOKEN_EXPIRY
              value: {{ $service.refreshTokenExpiryMilliseconds | quote }}
            - name: CREDS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: creds-key
                  optional: false
            - name: CREDS_IV
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: creds-iv
                  optional: false
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: jwt-secret
                  optional: false
            - name: JWT_REFRESH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $service.secretName | quote }}
                  key: jwt-refresh-secret
                  optional: false
            - name: MONGODB_HOST
              value: {{ include "homeserver.common.names.database" ( dict "service" $service "database" "mongo" ) | quote }}
            - name: MONGODB_PORT
              value: "27017"
            - name: MONGODB_USERNAME
              value: librechat
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: librechat-mongodb-credentials
                  key: mongodb-passwords
                  optional: false
            - name: MONGODB_DB
              value: librechat
            - name: MONGO_URI
              value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@$(MONGODB_HOST):$(MONGODB_PORT)/$(MONGODB_DB)"
          ports:
            - name: http
              containerPort: 3080
              protocol: TCP
          resources: {{- include "homeserver.common.container.resources" (dict "service" $service "context" $) | nindent 12 }}
          livenessProbe: {{- include "homeserver.common.container.livenessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          readinessProbe: {{- include "homeserver.common.container.readinessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          startupProbe: {{- include "homeserver.common.container.startupProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          volumeMounts: {{- include "homeserver.common.container.volumeMounts" (dict "service" $service "context" $) | nindent 12 }}
            - name: empty-dir
              mountPath: /app/data
              subPath: app-data-dir
            - name: empty-dir
              mountPath: /app/uploads
              subPath: app-uploads-dir
            - name: empty-dir
              mountPath: /app/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /app/api/logs
              subPath: app-api-logs-dir
            - name: client-images
              mountPath: /app/client/public/images
            - name: config
              mountPath: /config
      volumes: {{- include "homeserver.common.pod.volumes" (dict "service" $service "context" $) | nindent 8 }}
        - name: config
          configMap:
            name: {{ include "homeserver.common.names.name" ( dict "service" $service ) | quote }}
        - name: client-images
          hostPath:
            path: {{ $service.persistence.clientImages | quote }}
            type: Directory
{{- end }}
