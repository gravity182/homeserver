{{- $service := .Values.services.calibrebookdownloader }}
{{- if $service.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "homeserver.common.names.name" ( dict "service" $service ) | quote }}
  namespace: {{ include "homeserver.common.names.namespace" $ | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
  annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "homeserver.common.labels.matchLabels" ( dict "service" $service "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
      annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
    spec:
      automountServiceAccountToken: {{ include "homeserver.common.pod.automountServiceAccountToken" (dict "service" $service "context" $) }}
      enableServiceLinks: {{ include "homeserver.common.pod.enableServiceLinks" (dict "service" $service "context" $) }}
      priorityClassName: {{ include "homeserver.common.pod.priorityClass" (dict "service" $service "context" $) | quote }}
      affinity: {{- include "homeserver.common.pod.affinity" (dict "service" $service "context" $) | nindent 8 }}
      tolerations: {{- include "homeserver.common.pod.tolerations" (dict "service" $service "context" $) | nindent 8 }}
      securityContext: {{- include "homeserver.common.pod.securityContext" (dict "service" $service "context" $) | nindent 8 }}
      initContainers: {{- include "homeserver.common.pod.initContainers" (dict "service" $service "context" $) | nindent 8 }}
      containers:
        - name: calibre-book-downloader
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "homeserver.common.container.securityContext" (dict "service" $service "context" $) | nindent 12 }}
          envFrom: {{- include "homeserver.common.container.envFrom" (dict "service" $service "context" $) | nindent 12 }}
          env: {{- include "homeserver.common.container.env" (dict "service" $service "context" $) | nindent 12 }}
            - name: UID
              value: {{ required "A valid UID required!" .Values.host.uid | quote }}
            - name: GID
              value: {{ required "A valid GID required!" .Values.host.gid | quote }}
            - name: FLASK_PORT
              value: "8084"
            - name: FLASK_DEBUG
              value: "false"
            {{- if $service.useCfBypass }}
            {{- $cloudflarebypassforscraping := .Values.services.cloudflarebypassforscraping }}
            {{- if not $cloudflarebypassforscraping.enabled }}
            {{- printf "Cloudflare bypass is not possible - CloudflareBypassForScraping is not enabled!" | fail }}
            {{- else if not (eq $service.vpn.enabled $cloudflarebypassforscraping.vpn.enabled) }}
            {{- printf "VPN must be enabled both for CWA-Book-Downloader and CloudflareBypassForScraping!" | fail }}
            {{- end }}
            - name: USE_CF_BYPASS
              value: "true"
            - name: CLOUDFLARE_PROXY_URL
              value: {{ include "homeserver.common.utils.serviceUrl" (dict "service" $cloudflarebypassforscraping "scheme" "http" "context" $) | quote }}
            {{- else }}
            - name: USE_CF_BYPASS
              value: "false"
            {{- end }}
            - name: INGEST_DIR
              value: /cwa-book-ingest
            - name: BOOK_LANGUAGE
              value: {{ $service.bookLanguage | quote }}
            - name: SUPPORTED_FORMATS
              value: {{ $service.supportedFormats | quote }}
            {{- if $service.annasArchiveDonatorKey }}
            - name: AA_DONATOR_KEY
              value: {{ $service.annasArchiveDonatorKey | quote }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8084
              protocol: TCP
          resources: {{- include "homeserver.common.container.resources" (dict "service" $service "context" $) | nindent 12 }}
          livenessProbe: {{- include "homeserver.common.container.livenessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          readinessProbe: {{- include "homeserver.common.container.readinessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          startupProbe: {{- include "homeserver.common.container.startupProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          volumeMounts: {{- include "homeserver.common.container.volumeMounts" (dict "service" $service "context" $) | nindent 12 }}
            - name: ingest
              mountPath: /cwa-book-ingest
      volumes: {{- include "homeserver.common.pod.volumes" (dict "service" $service "context" $) | nindent 8 }}
        - name: ingest
          hostPath:
            path: {{ .Values.services.calibre.persistence.ingest | quote }}
            type: Directory
{{- end }}
