{{- $service := .Values.services.huginn }}
{{- if $service.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "homeserver.common.names.name" ( dict "service" $service ) | quote }}
  namespace: {{ include "homeserver.common.names.namespace" $ | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
  annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 4 }}
spec:
  revisionHistoryLimit: 3
  replicas: {{ $service.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "homeserver.common.labels.matchLabels" ( dict "service" $service "context" $ ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
      annotations: {{- include "homeserver.common.annotations.standard" ( dict "service" $service "context" $ ) | nindent 8 }}
    spec:
      automountServiceAccountToken: {{ include "homeserver.common.pod.automountServiceAccountToken" (dict "service" $service "context" $) }}
      enableServiceLinks: {{ include "homeserver.common.pod.enableServiceLinks" (dict "service" $service "context" $) }}
      priorityClassName: {{ include "homeserver.common.pod.priorityClass" (dict "service" $service "context" $) | quote }}
      affinity: {{- include "homeserver.common.pod.affinity" (dict "service" $service "context" $) | nindent 8 }}
      tolerations: {{- include "homeserver.common.pod.tolerations" (dict "service" $service "context" $) | nindent 8 }}
      securityContext: {{- include "homeserver.common.pod.securityContext" (dict "service" $service "context" $) | nindent 8 }}
      initContainers: {{- include "homeserver.common.pod.initContainers" (dict "service" $service "context" $) | nindent 8 }}
      containers:
        - name: huginn
          image: {{ printf "%s:%s" $service.image.repository $service.image.tag | quote }}
          imagePullPolicy: {{ $service.image.pullPolicy }}
          securityContext: {{- include "homeserver.common.container.securityContext" (dict "service" $service "context" $) | nindent 12 }}
          envFrom: {{- include "homeserver.common.container.envFrom" (dict "service" $service "context" $) | nindent 12 }}
          env: {{- include "homeserver.common.container.env" (dict "service" $service "context" $) | nindent 12 }}
            - name: TIMEZONE
              value: {{ required "A valid timezone required!" .Values.host.tz | quote }}
            - name: APP_SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $service.appSecretToken.secretName | quote }}
                  key: {{ $service.appSecretToken.secretKey | quote }}
                  optional: false
            - name: SKIP_INVITATION_CODE
              value: {{ $service.invitationCode.enabled | ternary "false" "true" | quote }}
            {{- if $service.invitationCode.enabled }}
            - name: INVITATION_CODE
              valueFrom:
                secretKeyRef:
                  name: {{ $service.invitationCode.secretName | quote }}
                  key: {{ $service.invitationCode.secretKey | quote }}
                  optional: false
            {{- end }}
            - name: REQUIRE_CONFIRMED_EMAIL
              value: {{ $service.requireConfirmedEmail | quote }}
            - name: DEFAULT_HTTP_USER_AGENT
              value: {{ $service.userAgent | quote }}
            - name: DATABASE_ADAPTER
              value: postgresql
            - name: POSTGRES_HOST
              value: {{ include "homeserver.common.names.database" (dict "service" $service "database" "postgres") | quote }}
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USERNAME
              value: huginn
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: huginn-postgres-credentials
                  key: user-password
            - name: POSTGRES_DB
              value: huginn
            - name: DATABASE_NAME
              value: $(POSTGRES_DB)
            - name: DATABASE_URL
              value: postgres://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources: {{- include "homeserver.common.container.resources" (dict "service" $service "context" $) | nindent 12 }}
          livenessProbe: {{- include "homeserver.common.container.livenessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          readinessProbe: {{- include "homeserver.common.container.readinessProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          startupProbe: {{- include "homeserver.common.container.startupProbe.httpGet" (dict "service" $service "path" "/" "context" $) | nindent 12 }}
          volumeMounts: {{- include "homeserver.common.container.volumeMounts" (dict "service" $service "context" $) | nindent 12 }}
      volumes: {{- include "homeserver.common.pod.volumes" (dict "service" $service "context" $) | nindent 8 }}
{{- end }}
