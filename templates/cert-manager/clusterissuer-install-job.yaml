apiVersion: batch/v1
kind: Job
metadata:
  name: helm-hook-install-clusterissuer
  namespace: {{ include "homeserver.common.names.namespace" $ | quote }}
  labels: {{- include "homeserver.common.labels.standard" ( dict "context" $ ) | nindent 4 }}
    app.kubernetes.io/name: clusterissuer-install
  annotations: {{- include "homeserver.common.annotations.standard" ( dict "context" $ ) | nindent 4 }}
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 10
  template:
    metadata:
      labels: {{- include "homeserver.common.labels.standard" ( dict "context" $ ) | nindent 8 }}
        app.kubernetes.io/name: helm-hook-install-clusterissuer
      annotations: {{- include "homeserver.common.annotations.standard" ( dict "context" $ ) | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: helm-hook-clusterissuer
      automountServiceAccountToken: true
      containers:
        - name: install
          image: docker.io/bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              set -eux

              CRD_NAME="clusterissuers.cert-manager.io"
              CONTROLLER_DEPLOYMENT_NAME="cert-manager"
              echo "Waiting for CRDs to be ready..."
              kubectl wait --for=condition=Established crd/${CRD_NAME} --timeout=60s
              echo "Waiting for controller to be ready..."
              kubectl wait --for=condition=Available deployment/${CONTROLLER_DEPLOYMENT_NAME} --namespace {{ include "homeserver.cert-manager.names.namespace" . }} --timeout=60s

              echo "Applying resources..."
              kubectl apply -f /etc/config/readiness-manifests/
          volumeMounts:
            - name: manifests
              mountPath: /etc/config/readiness-manifests
              readOnly: true
      volumes:
        - name: manifests
          configMap:
            name: clusterissuer
