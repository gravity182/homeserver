# yaml-language-server: $schema=values.schema.json
---
## Host configuration
##
host:
  ## Host timezone
  ## e.g. 'Europe/Berlin'
  ##
  tz: "" # REQUIRED
  ## Host user's ID
  ## Can be obtained via `id -u`
  ##
  uid: 1000 # REQUIRED
  ## Host user's group ID
  ## Can be obtained via `id -g`
  ##
  gid: 1000 # REQUIRED
## cert-manager chart configuration
## see available values at https://artifacthub.io/packages/helm/cert-manager/cert-manager#configuration
##
cert-manager:
  enabled: true
  namespace: cert-manager
  crds:
    # CRDs must be installed manually
    # otherwise chart installation fails as dependent cert-manager subchart's CRDs are not installed first for some reason
    # see the similar issue https://github.com/kedacore/charts/issues/226
    enabled: false
    keep: true
  config:
    apiVersion: controller.config.cert-manager.io/v1alpha1
    kind: ControllerConfiguration
    logging:
      verbosity: 2
      format: text
    # DO NOT disable this option, otherwise cert-manager won't be able to create a cert for Gateway API
    enableGatewayAPI: true
## Additional configuration for cert-manager tailored to this chart
##
x-cert-manager:
  ## ClusterIssuer configuration
  ## This issuer will be used to automatically issue TLS certificates for Ingress/Gateway API
  ##
  cluster-issuer:
    # ACME server URL
    # By default points to the Let's Encrypt's prod environment
    # DO NOT change this option unless you know what you're doing
    server: https://acme-v02.api.letsencrypt.org/directory
    # Your email to register an account with Let's Encrypt
    email: example@gmail.com
    ## Solvers configuration
    ##
    ## Cloudflare is used by default with implication that you've transferred your domain to Cloudflare.
    ##
    ## The only thing you must do is to create a Cloudflare API token:
    ## 1. Go to the Cloudflare Dashboard: User Profile > API Tokens > API Tokens.
    ## 2. Specify the permissions for the token as follows:
    ##    Permissions:
    ##      Zone - DNS - Edit
    ##      Zone - Zone - Read
    ##    Zone Resources:
    ##      Include - All Zones
    ## 3. Create a secret in the `cert-manager` namespace with the name `cloudflare-api-key-secret`
    ##
    ## If you want to use a different provider, please read docs on DNS01 validation and supported providers:
    ## https://cert-manager.io/docs/configuration/acme/dns01/
    ## NOTE: The only valid solver is a DNS01 solver, since only it can issue wildcard certs
    solvers:
      - dns01:
          cloudflare:
            apiTokenSecretRef:
              name: cloudflare-api-key-secret
              key: api-key
## Authentik configuration
## All values under `authentik` passed as is to the authentik subchart
## See available values at https://artifacthub.io/packages/helm/goauthentik/authentik#values
##
authentik:
  namespaceOverride: authentik
  authentik:
    enabled: true
    secret_key: "" # REQUIRED; generate via `pwgen -s -B -n 50 1`
    error_reporting:
      enabled: false
    postgresql:
      password: ""
  server:
    metrics:
      enabled: false
    ingress:
      enabled: true
      ingressClassName: traefik
      hosts:
        - authentik.domain.tld # REQUIRED; e.g. 'authentik.example.com'
  worker:
    serviceAccountName: authentik
  # service account is required by worker to create an embedded output
  # DO NOT DISABLE
  serviceAccount:
    create: true
  # authentik-remote-cluster subchart
  # used on condition `serviceAccount.create=true`
  # it's needed for the embedded outpost creation
  authentik-remote-cluster:
    namespaceOverride: authentik
    fullnameOverride: authentik
    serviceAccountSecret:
      enabled: false
  # postgresql bitnami subchart
  postgresql:
    enabled: true
    namespaceOverride: authentik
    auth:
      password: "" # REQUIRED; generate via `pwgen -s -B -n 50 1`
    backup:
      # host directory where to save backups
      dir: /opt/authentik/postgresql/backup
      # schedule cron
      scheduleCron: "0 5 * * *"
      # how long to keep old backups (in days)
      retentionDays: 180
  # redis bitnami subchart
  redis:
    enabled: true
    namespaceOverride: authentik
## Ingress configuration
##
ingress:
  ## Your domain
  ## e.g. 'example.com' (without a scheme)
  ##
  domain: "" # REQUIRED
  ## The service to serve on the root domain
  ## Set it to `services.<service>.name`. Leave empty to disable.
  ##
  rootService: homepage
  ## Extra annotations to add to the Ingress resource
  ##
  extraAnnotations: {}
## VPN configuration
## To enable VPN for a service, set `services.<service_name>.vpn.enabled=true`
##
vpn:
  ## Enable SYS_MODULE capability
  ## Disable only if you know what you're doing
  ##
  sysModule: true
  ## Name of the secret containing the WireGuard configuration
  ##
  secretRef: wireguard-conf
  ## Key inside the secret
  ##
  secretKey: wg0.conf
## Whether information about services should be injected into pod's environment variable
## The environment variables injected by service links are usually not needed, but can lead to slow boot times.
## Recommended to keep it disabled.
##
enableServiceLinks: false
## Whether to mount Service Account token in pods
## Recommended to keep it disabled.
##
automountServiceAccountToken: false
## Common labels to add to all the deployed resources. Evaluated as a template
##
## Usage:
## commonLabels:
##    app.kubernetes.io/managed-by: Helm
##
commonLabels: {}
## Common annotations to add to all the deployed resources. Evaluated as a template
##
## Usage:
## commonAnnotations:
##    app.kubernetes.io/managed-by: Helm
##
commonAnnotations: {}
## Pods' global liveness probe. Evaluated as a template.
## Can be overriden per service.
## See https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 10
  failureThreshold: 6
  successThreshold: 1
## Pods' global readiness probe. Evaluated as a template.
## Can be overriden per service.
## see https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
readinessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
## Pods' global startup probe. Evaluated as a template.
## Can be overriden per service.
## Slow starting containers can be protected through startup probes.
## See https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
##
startupProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 20
  timeoutSeconds: 10
  failureThreshold: 30
  successThreshold: 1
## Resources configuration
##
resources:
  ## Whether resources management should be enabled
  ## see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  enabled: false
## Automatically fix volume permissions
## Enable this if you're having permission issues
## If that solves your problem, you should properly chown/chmod your persistence directory on the host
## NOTE: it's not recommended to keep it enabled, since the init container works as a root user
##
volumePermissions:
  enabled: false
## Housekeeping configuration
##
housekeeping:
  ## Media cleanup job configuration
  ## This job will remove empty directories that possibly only contain metadata files
  ##
  mediaCleanup:
    enabled: false
    # How often to run the cleanup job (cron)
    # Every hour by default
    scheduleCron: "0 */1 * * *"
    # Whether to run in dry-run mode (only report which folders would be deleted)
    dryRun: false
    # List of media directories to watch
    paths:
      # Example:
      # - path: /data/library/movies    # Required: path to the media directory
      #   maxDepth: 2                   # Optional: maximum directory depth level to scan (default: 1)
      #
      # Explanation of maxDepth:
      # - maxDepth = 0: Scans only the root directory itself.
      #                 Good for uncategorized media: root dir (0) -> media files without subdirs.
      #                 For instance, /data/library/videos/*.mp4
      # - maxDepth = 1: Scans immediate subdirectories.
      #                 Good for Movies and TV shows: root dir (0) -> movie dir (1).
      #                 For instance, /data/library/movies/Avatar/*.mkv
      # - maxDepth = 2: Scans one level deeper.
      #                 Good for Music: root dir (0) -> author dir (1) -> album dir (2).
      #                 For instance, /data/library/music/Eminem/Relapse/*.m4a
      #
      - path: /data/library/movies
        maxDepth: 1
      - path: /data/library/tv
        maxDepth: 1
      - path: /data/library/music
        maxDepth: 2
    # List of file globs considered as metadata files
    # See https://docs.python.org/3/library/fnmatch.html for more information about the glob patterns
    metadataFileGlobs:
      - "*.nfo"
      - "*.jpg"
      - "*.jpeg"
      - "*.png"
      - "*.srt"
      - "*.sub"
      - "*.idx"
      - "theme.mp3"
      - ".DS_Store"
      - "Thumbs.db"
## Services configuration
##
services:
  backrest:
    enabled: false
    exposed: true
    name: backrest
    replicaCount: 1
    critical: false
    image:
      repository: garethgeorge/backrest
      tag: latest
      pullPolicy: IfNotPresent
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 9898
    ingress:
      - backrest
      - backup
    userdata: /opt
    persistence:
      config: /opt/backrest/config
      data: /opt/backrest/data
      cache: /opt/backrest/cache
    vpn:
      enabled: false
    extraEnv: []
    # you pass your Restic/S3/B2 secrets here
    # extraEnvSecrets:
    #   - name: RESTIC_PASSWORD
    #     secretName: backrest-restic-password-secret
    #     secretKey: restic-password
    #   - name: B2_ACCOUNT_ID
    #     secretName: backrest-b2-secret
    #     secretKey: b2-account-id
    #   - name: B2_ACCOUNT_KEY
    #     secretName: backrest-b2-secret
    #     secretKey: b2-account-key
    #   - name: AWS_ACCESS_KEY_ID
    #     secretName: backrest-aws-s3-secret
    #     secretKey: aws-access-key-id
    #   - name: AWS_SECRET_ACCESS_KEY
    #     secretName: backrest-aws-s3-secret
    #     secretKey: aws-secret-access-key
    extraEnvSecrets: []
  homepage:
    enabled: false
    exposed: true
    name: homepage
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/gethomepage/homepage
      tag: v1.0.4
      pullPolicy: IfNotPresent
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 3000
    ingress:
      - homepage
    widgets:
      # the values below are not mandatory to get Homepage working, but widgets won't be working
      authentik:
        apiKey: "" # go to Admin Portal > Directory > Tokens & App passwords and generate a new API key
      miniflux:
        apiKey: "" # go to Settings -> API Keys and generate a new API key
      radarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      sonarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      lidarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      bazarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      prowlarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      autobrr:
        apiKey: "" # go to Settings -> API Keys and generate a new API key
      jellyseerr:
        apiKey: "" # go to Settings -> General and retrieve the API key
      tautulli:
        apiKey: "" # go to Settings -> Web Interface and retrieve the API key
      jellyfin:
        apiKey: "" # go to Settings -> API Keys and generate a new API key
      sabnzbd:
        apiKey: "" # go to Settings -> General and retrieve the API key
      changedetection:
        apiKey: ""
      gotify:
        apiKey: "" # go to Clients and generate a new client
      kavita:
        username: ""
        password: ""
      calibre:
        username: ""
        password: ""
      mealie:
        apiKey: ""
    vpn:
      enabled: false
    extraEnv: []
  plex:
    enabled: false
    exposed: true
    name: plex
    replicaCount: 1
    critical: true
    image:
      repository: ghcr.io/home-operations/plex
      tag: rolling
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8080
      # make sure to open the remote access port in your firewall
      # you can change this port but it should be in range of 30000-32767 (k8s NodePort)
      remoteAccess: 32400
    ingress:
      - plex
    # get a claim code at https://www.plex.tv/claim/
    # note the code is only active for 5 minutes
    claim: "" # REQUIRED
    persistence:
      config: /opt/plex/config
      library: /data/library
    vpn:
      enabled: false
    extraEnv: []
  jellyfin:
    enabled: false
    exposed: true
    name: jellyfin
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/jellyfin/jellyfin
      tag: "10"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "large"
    ports:
      http: 8096
      udp: 7359
    ingress:
      - jellyfin
    vpn:
      enabled: false
    persistence:
      config: /opt/jellyfin/config
      cache: /opt/jellyfin/cache
      library: /data/library
    extraEnv: []
  autobrr:
    enabled: false
    exposed: true
    name: autobrr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/autobrr/autobrr
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 7474
    ingress:
      - autobrr
    persistence:
      config: /opt/autobrr/config
    vpn:
      enabled: false
    extraEnv:
      []
      # see the full list of supported env vars
      # https://autobrr.com/installation/docker#environment-variables
      #
  qbittorrent:
    enabled: false
    exposed: true
    name: qbittorrent
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/qbittorrent
      tag: "5"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8080
      # make sure the p2p port is allowed in your firewall
      # you can change this port but it should be in range of 30000-32767 (k8s NodePort)
      p2p: 32700
    ingress:
      - qbittorrent
      - torrent
    # enables VueTorrent
    # see https://github.com/VueTorrent/VueTorrent
    # set '/vuetorrent' in the qBittorrent -> Web UI settings
    useVuetorrent: true
    persistence:
      config: /opt/qbittorrent/config
      # the container should have access only to the torrent downloads directory
      data: /data/torrents
    vpn:
      enabled: false
    extraEnv: []
  qbit_manage:
    enabled: false
    exposed: false
    name: qbit-manage
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/stuffanthings/qbit_manage
      tag: v4.2.1
      pullPolicy: IfNotPresent
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports: {}
    ingress: []
    persistence:
      config: /opt/qbit_manage/config
    # script schedule cron
    # use https://crontab.guru/ to create a valid cron expression
    # run the script every hour by default
    scheduleCron: "0 */1 * * *"
    vpn: {}
    extraEnv:
      # see the full list of supported env vars
      # https://github.com/StuffAnThings/qbit_manage/wiki/Commands
      #
      - name: QBT_LOG_LEVEL
        value: INFO
  sabnzbd:
    enabled: false
    exposed: true
    name: sabnzbd
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/sabnzbd
      tag: "4"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8080
    ingress:
      - sabnzbd
      - usenet
    persistence:
      config: /opt/sabnzbd/config
      data: /data/usenet
    vpn:
      enabled: false
    extraEnv: []
  prowlarr:
    enabled: false
    exposed: true
    name: prowlarr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/prowlarr
      tag: "1"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 9696
    ingress:
      - prowlarr
    persistence:
      config: /opt/prowlarr/config
    vpn:
      enabled: false
    extraEnv: []
  radarr:
    enabled: false
    exposed: true
    name: radarr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/radarr
      tag: "5"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 7878
    ingress:
      - radarr
      - movies
      - movie
    persistence:
      config: /opt/radarr/config
      data: /data
    vpn:
      enabled: false
    extraEnv: []
  sonarr:
    enabled: false
    exposed: true
    name: sonarr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/sonarr
      tag: "4"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8989
    ingress:
      - sonarr
      - tv
    persistence:
      config: /opt/sonarr/config
      data: /data
    vpn:
      enabled: false
    extraEnv: []
  lidarr:
    enabled: false
    exposed: true
    name: lidarr
    replicaCount: 1
    critical: false
    image:
      repository: lscr.io/linuxserver/lidarr
      tag: latest
      pullPolicy: Always
    securityContext:
      # the Linuxserver image uses s6-overlay,
      # which has its own mechanism for switching to a non-root user via PUID/GUID
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8686
    ingress:
      - lidarr
      - music
    persistence:
      config: /opt/lidarr/config
      data: /data
    vpn:
      enabled: false
    extraEnv: []
  whisparr:
    enabled: false
    exposed: true
    name: whisparr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/hotio/whisparr
      tag: v3
      pullPolicy: Always
    securityContext:
      # the Hotio image uses s6-overlay,
      # which has its own mechanism for switching to a non-root user via PUID/GUID
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 6969
    ingress:
      - whisparr
      - porn
      - xxx
    persistence:
      config: /opt/whisparr/config
      data: /data
    vpn:
      enabled: false
    extraEnv: []
  bazarr:
    enabled: false
    exposed: true
    name: bazarr
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/bazarr
      tag: "1"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 6767
    ingress:
      - bazarr
      - subtitles
      - subtitle
    persistence:
      config: /opt/bazarr/config
      data: /data
    vpn:
      enabled: false
    extraEnv: []
  jellyseerr:
    enabled: false
    exposed: true
    name: jellyseerr
    replicaCount: 1
    critical: false
    image:
      repository: fallenbagel/jellyseerr
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 5055
    ingress:
      - jellyseerr
    persistence:
      config: /opt/jellyseerr/config
    vpn:
      enabled: false
    extraEnv: []
  flaresolverr:
    enabled: false
    exposed: false
    name: flaresolverr
    replicaCount: 1
    critical: false
    image:
      # up to date fork of FlareSolverr
      # uses nodriver method instead of obsolete undetected-chromedriver
      repository: 21hsmw/flaresolverr
      tag: nodriver
      pullPolicy: Always
    securityContext:
      # throws exception if strict, hard to debug
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8191
    ingress: []
    vpn:
      enabled: false
    # nodriver is a preferred method
    # it's the official successor of undetected-chromedriver
    # DO NOT change this value unless you know what you are doing
    driver: nodriver
    logLevel: INFO
    lang: en_US
    # see the full list of supported env vars
    # https://github.com/21hsmw/FlareSolverr?tab=readme-ov-file#environment-variables
    #
    extraEnv: []
  cloudflarebypassforscraping:
    enabled: false
    exposed: false
    name: cloudflarebypassforscraping
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/sarperavci/cloudflarebypassforscraping
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: false
    resourcesPreset: "medium"
    ports:
      http: 8000
    ingress: []
    vpn: {}
    extraEnv: []
  tautulli:
    enabled: false
    exposed: true
    name: tautulli
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/home-operations/tautulli
      tag: "2"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8181
    ingress:
      - tautulli
    persistence:
      config: /opt/tautulli/config
    vpn:
      enabled: false
    extraEnv: []
  kometa:
    enabled: false
    exposed: false
    name: kometa
    replicaCount: 1
    critical: false
    image:
      repository: kometateam/kometa
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8181
    ingress: []
    persistence:
      config: /opt/kometa/config
    scheduleCron: "0 5 * * *"
    enableJmxdOverlays: True
    connections:
      tmdb:
        apiKey: ""
        language: en
        region: US
      imdb:
        userId: ""
      letterboxd:
        username: ""
      plex:
        apiKey: ""
      radarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
        rootFolderPath: /data/library/movies # your library path
        qualityProfile: "Best 1080p" # your quality profile name
      sonarr:
        apiKey: "" # go to Settings -> General and retrieve the API key
        rootFolderPath: /data/library/tv # your library path
        qualityProfile: "Best 1080p" # your quality profile name
    vpn:
      enabled: false
    # see the full list of supported env vars
    # https://kometa.wiki/en/latest/kometa/environmental
    #
    extraEnv: []
  thelounge:
    enabled: false
    exposed: true
    name: thelounge
    replicaCount: 1
    critical: false
    image:
      repository: thelounge/thelounge
      tag: "4"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 9000
    ingress:
      - thelounge
      - lounge
      - irc
    persistence:
      config: /opt/thelounge/config
    vpn:
      enabled: false
    extraEnv: []
  myspeed:
    enabled: false
    exposed: true
    name: myspeed
    replicaCount: 1
    critical: false
    image:
      repository: germannewsmaker/myspeed
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 5216
    ingress:
      - myspeed
      - speedtest
    persistence:
      config: /opt/myspeed/config
    vpn:
      enabled: false
    extraEnv: []
  stirlingpdf:
    enabled: false
    exposed: true
    name: stirlingpdf
    replicaCount: 1
    critical: false
    image:
      repository: frooodle/s-pdf
      tag: latest
      pullPolicy: Always
    securityContext:
      # unfortunately the image needs root access
      # in order to install packages
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8080
    ingress:
      - stirlingpdf
      - stirling-pdf
      - pdf
    vpn:
      enabled: false
    enableLogin: false
    installBookAndAdvancedHtmlOps: true
    langs: "en_US"
    persistence:
      config: /opt/stirlingpdf/config
    # see the full list of supported env vars
    # https://github.com/Stirling-Tools/Stirling-PDF?tab=readme-ov-file#customisation
    #
    extraEnv: []
  miniflux:
    enabled: false
    exposed: true
    name: miniflux
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/miniflux/miniflux
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8080
    ingress:
      - miniflux
      - rss
    # number of days after which marking read items as removed; set to -1 to disable this feature
    cleanupArchiveReadDays: 3600
    # number of days after which marking unread items as removed; set to -1 to disable this feature
    cleanupArchiveUnreadDays: 360
    # cleanup job frequency
    cleanupFrequencyHours: 24
    vpn:
      enabled: false
    db:
      dbName: miniflux
      user: miniflux
      # generate a password for the postgres user
      # e.g. `pwgen -s -B -n 14 1`
      password: "" # REQUIRED
      securityContext:
        strict: false
      resourcesPreset: "micro"
      ports:
        postgres: 5432
      persistence:
        data: /opt/miniflux/postgresql/17/data
      backup:
        dir: /opt/miniflux/postgresql/17/backup
        scheduleCron: "0 5 * * 0"
        retentionDays: 180
        securityContext:
          strict: false
        resourcesPreset: "micro"
    extraEnv: []
  huginn:
    enabled: false
    exposed: true
    name: huginn
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/huginn/huginn
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 3000
    ingress:
      - huginn
    # generate a secret token
    # e.g. `openssl rand -base64 32`
    appSecretToken: "" # REQUIRED
    # leave empty if you don't want to require the inv code for registration
    # usually not needed as this service is already protected by Authentik
    invitationCode: ""
    vpn:
      enabled: false
    db:
      dbName: huginn
      user: huginn
      # generate a password for the postgres user
      # e.g. `pwgen -s -B -n 14 1`
      password: "" # REQUIRED
      ports:
        postgres: 5432
      securityContext:
        strict: false
      resourcesPreset: "micro"
      persistence:
        data: /opt/huginn/postgresql/17/data
      backup:
        dir: /opt/huginn/postgresql/17/backup
        scheduleCron: "0 5 * * 0"
        retentionDays: 180
        securityContext:
          strict: false
        resourcesPreset: "micro"
    extraEnv: []
  playwright:
    enabled: false
    exposed: false
    name: playwright
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/browserless/chromium
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 3000
    ingress: []
    # generate a secret token
    # e.g. `openssl rand -base64 32`
    token: "" # REQUIRED
    timeout: 60000
    maxConcurrentSessions: 10
    maxQueueLength: 10
    persistence:
      config: /opt/playwright/config
    vpn:
      enabled: false
    # see the full list of supported env vars
    # https://docs.browserless.io/docker/config
    #
    extraEnv: []
  changedetectionio:
    enabled: false
    exposed: true
    name: changedetection
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/dgtlmoon/changedetection.io
      tag: "0"
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 5000
    ingress:
      - changedetectionio
      - changedetection
    vpn:
      enabled: false
    playwrightLaunchOptions:
      # see the full list of available launch options
      # https://docs.browserless.io/chrome-flags
      stealth: true
      headless: true
      args: ["--lang=en-US", "--hide-scrollbars"]
    persistence:
      config: /opt/changedetectionio/config
    # see the full list of supported env vars
    # https://github.com/dgtlmoon/changedetection.io/blob/master/docker-compose.yml#L11
    #
    extraEnv: []
  archivebox:
    enabled: false
    exposed: true
    name: archivebox
    replicaCount: 1
    critical: false
    image:
      repository: archivebox/archivebox
      tag: latest
      pullPolicy: Always
    securityContext:
      # uses its own mechanism for switching to a non-root user via PUID/GUID
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8000
    ingress:
      - archivebox
      - archive
    persistence:
      data: /opt/archivebox/data
    adminUsername: admin
    adminPassword: admin
    mediaMaxSize: 750m
    timeout: 120
    saveTitle: true
    saveFavicon: true
    saveWget: false
    saveWarc: false
    savePdf: false
    saveScreenshot: false
    saveDom: false
    saveSinglefile: true
    saveReadability: true
    saveMercury: false
    saveGit: false
    saveMedia: false
    saveArchiveDotOrg: false
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
    vpn:
      enabled: false
    # see the full list of supported env vars
    # https://github.com/ArchiveBox/ArchiveBox/wiki/Configuration
    #
    extraEnv: []
  apprise:
    enabled: false
    exposed: true
    name: apprise
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/caronc/apprise
      tag: "1.1"
      pullPolicy: Always
    securityContext:
      # incompatible with read-only file system
      # though non-root user is supported
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8000
    ingress:
      - apprise
    logLevel: INFO
    statefulMode: simple
    # attach size is limited to 500 Mb at max
    attachSizeMegabytes: 500
    defaultConfigId: apprise
    defaultTheme: dark
    persistence:
      config: /opt/apprise/config
    vpn:
      enabled: false
    # see the full list of supported env vars
    # https://github.com/caronc/apprise-api?tab=readme-ov-file#environment-variables
    #
    extraEnv: []
  gotify:
    enabled: false
    exposed: true
    name: gotify
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/gotify/server
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 80
    ingress:
      - gotify
    adminUsername: admin
    adminPassword: admin
    databaseDialect: sqlite3
    databaseConnection: data/gotify.db
    persistence:
      data: /opt/gotify/data
    vpn:
      enabled: false
    # see the full list of supported env vars
    # https://gotify.net/docs/config#environment-variables
    #
    extraEnv: []
  kavita:
    enabled: false
    exposed: true
    name: kavita
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/kareadita/kavita
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 5000
    ingress:
      - kavita
    persistence:
      config: /opt/kavita/config
      library: /data/library/books
    vpn:
      enabled: false
    extraEnv: []
  calibre:
    enabled: false
    exposed: true
    name: calibre
    replicaCount: 1
    critical: false
    image:
      repository: crocodilestick/calibre-web-automated
      tag: latest
      pullPolicy: Always
    securityContext:
      # the image uses s6-overlay,
      # which has its own mechanism for switching to a non-root user via PUID/GUID
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8083
    ingress:
      - calibre
      - books
    vpn:
      enabled: false
    persistence:
      config: /opt/calibre-web-automated/config
      ingest: /opt/calibre-web-automated/ingest
      data: /data/library/books
    extraEnv: []
  calibrebookdownloader:
    enabled: false
    exposed: true
    name: calibre-book-downloader
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/calibrain/calibre-web-automated-book-downloader
      tag: latest
      pullPolicy: Always
    securityContext:
      # the image has its own mechanism for switching to a non-root user via UID/UID
      strict: false
    resourcesPreset: "micro"
    ports:
      http: 8084
    ingress:
      - calibre-book-downloader
      - annas-archive
      - anna-archive
    # bypasses Cloudflare's protection when downloading books from Anna's Archive
    # enabling this option will automatically deploy a separate service, CloudflareBypassForScraping
    # see https://github.com/sarperavci/CloudflareBypassForScraping
    useCfBypass: true
    # preferred books language, you can add more languages separated by a comma
    bookLanguage: "en"
    # restricts the search to specific formats
    # you can add more formats separated by a comma
    # pay attention to compatibility with CWA - some formats may not be ingested
    # the default value is synced with the current version of CWA (3.0.1)
    # note: formats are sorted in the order of preference
    supportedFormats: "epub,azw,azw3,azw4,mobi,fb2,cbz,cbr,cb7,cbc,chm,pdf,djvu,docx,fbz,html,htmlz,lit,lrf,odt,prc,pdb,pml,rb,rtf,snb,tcr,txtz"
    annasArchiveDonatorKey: "" # set your donator key if you have one; this will make downloads much, much faster
    # Anna's Archive is blocked in some countries, you can use a VPN to bypass the block
    vpn:
      enabled: false
    extraEnv: []
  openbooks:
    enabled: false
    exposed: true
    name: openbooks
    replicaCount: 1
    critical: false
    image:
      repository: evanbuss/openbooks
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 8080
    ingress:
      - openbooks
      - irchighway
      - highway
    # your IRC name, it will be used to identify you in the IRC channel
    ircname: "" # REQUIRED
    # if true, won't send files to browser; in other words, it'll only send files to Calibre for ingestion
    noBrowserDownloads: false
    vpn:
      enabled: false
  convertx:
    enabled: false
    exposed: true
    name: convertx
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/c4illin/convertx
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 3000
    ingress:
      - convertx
      - convert
    # set to 0 to disable auto-delete
    autoDeleteEveryNHours: 24
    persistence:
      data: /opt/convertx/data
    vpn:
      enabled: false
    # see available env vars
    # https://github.com/C4illin/ConvertX?tab=readme-ov-file#environment-variables
    #
    extraEnv: []
  pinchflat:
    enabled: false
    exposed: true
    name: pinchflat
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/kieraneglin/pinchflat
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "medium"
    ports:
      http: 8945
    ingress:
      - pinchflat
    vpn:
      enabled: false
    persistence:
      config: /opt/pinchflat/config
      data: /data/library/videos
    extraEnv: []
  mealie:
    enabled: false
    exposed: true
    name: mealie
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/mealie-recipes/mealie
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "medium"
    ports:
      http: 9000
    ingress:
      - mealie
      - recipes
      - recipe
    tokenTimeHours: 4320
    persistence:
      data: /opt/mealie/data
    vpn:
      enabled: false
    extraEnv: []
  librechat:
    enabled: false
    exposed: true
    name: librechat
    replicaCount: 1
    critical: false
    image:
      repository: ghcr.io/danny-avila/librechat
      tag: latest
      pullPolicy: Always
    securityContext:
      strict: true
    resourcesPreset: "micro"
    ports:
      http: 3080
    ingress:
      - librechat
      - ai
    # secret containing the required sensitive values
    # must contain the following keys:
    # - creds-key: 32-byte key (64 characters in hex) for securely storing credentials
    # - creds-iv: 16-byte IV (32 characters in hex) for securely storing credentials
    # - jwt-secret: the secret used to sign the JWT tokens
    # - jwt-refresh-secret: JWT Refresh Token
    #
    # you can generate creds at https://www.librechat.ai/toolkit/creds_generator
    secretName: librechat-secret
    # endpoints available for usage, separated by comma
    #
    # openAI is a built-in endpoint
    # env var OPENAI_API_KEY containing the api key is required
    # see https://www.librechat.ai/docs/configuration/dotenv#openai
    #
    # OpenRouter is a custom endpoint configured in files/default/librechat.yaml
    # env var OPENROUTER_KEY containing the api key is required
    # see https://www.librechat.ai/docs/configuration/librechat_yaml/ai_endpoints/openrouter
    #
    # you can pass your API keys securely via extraEnvSecrets (see the example below)
    #
    # remove these endpoints and add your own ones if needed
    # you can configure the endpoints however you want, that's just an example
    endpoints: "openAI,OpenRouter"
    # whether to allow login via email
    allowEmailLogin: true
    # whether to allow login via socials
    # you need this to use an OpenID provider (e.g. Authentik)
    allowSocialLogin: true
    # how long an auth session lives
    # 180 days (15552000000 milliseconds) by default
    refreshTokenExpiryMilliseconds: 15552000000
    # custom footer
    # keep it empty to remove that unnecessary footer mentioning Librechat details
    customFooter: ""
    # enable search backed by MeiliSearch
    # see https://www.librechat.ai/docs/features/search
    #
    # make sure the MeiliSearch service is enabled and master key secret set
    search: false
    persistence:
      # directory where to keep user-uploaded images
      clientImages: /opt/librechat/client/images
    db:
      # database name
      # it's a name internal to mongo, not the k8s resource
      # the database is created automatically at startup
      dbName: librechat
      securityContext:
        strict: true
      resourcesPreset: "micro"
      ports:
        mongo: 27017
      persistence:
        data: /opt/librechat/mongo/8
      # secret containing the required sensitive values
      # must contain the following keys:
      # - mongodb-root-username: root user username
      # - mongodb-root-password: root user password
      # - mongodb-librechat-username: librechat user username
      # - mongodb-librechat-password: librechat user password
      #
      # The librechat user, which is used by the app, is restricted in privileges and has access only to the `dbName` database
      # The root user is used by the backup cronjob
      #
      secretName: librechat-db-secret
      backup:
        dir: /opt/librechat/mongo/8/backup
        scheduleCron: "0 5 * * 0"
        retentionDays: 180
        securityContext:
          strict: true
        resourcesPreset: "micro"
      extraEnv:
        # see all the available env variables
        # https://github.com/bitnami/containers/blob/main/bitnami/mongodb/README.md#configuration
        #
        # log only info messages
        # everything above 0 is debug logging
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: "0"
    vpn:
      enabled: false
    extraEnvFromSecret: ""
    # see all the available env variables
    # https://www.librechat.ai/docs/configuration/dotenv
    #
    # - name: DEBUG_LOGGING
    #   value: "true"
    extraEnv: []
    # you can pass your API keys and other secrets securely here
    #
    # - name: OPENAI_API_KEY
    #   secretName: librechat-endpoints-secret
    #   secretKey: librechat-openai-api-key
    # - name: OPENROUTER_KEY
    #   secretName: librechat-endpoints-secret
    #   secretKey: librechat-openrouter-api-key
    extraEnvSecrets: []
  meilisearch:
    enabled: false
    exposed: false
    name: meilisearch
    replicaCount: 1
    critical: true
    image:
      repository: getmeili/meilisearch
      tag: v1.13
      pullPolicy: IfNotPresent
    securityContext:
      strict: true
    resourcesPreset: "medium"
    ports:
      http: 7700
    ingress: []
    persistence:
      data: /opt/meilisearch/data
    # secret containing the master key under the key 'master-key'
    # the master key must be at least 16 bytes long
    masterKeySecret: meilisearch-secret
    vpn:
      enabled: false
    extraEnv: []
